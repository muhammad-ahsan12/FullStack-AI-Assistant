name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # =======================
  # Backend Tests & Linting
  # =======================
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx flake8

      - name: Run Linter (flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # ✅ Update: Run pytest without requiring a tests/ folder
      - name: Run Backend Tests
        run: |
          export PYTHONPATH=.
          pytest -v  # will auto-discover any test_*.py files

  # =======================
  # Frontend Build & Tests
  # =======================
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run TypeScript Check
        run: npx tsc --noEmit

      # Optional: run frontend tests if available
      - name: Run Frontend Tests
        run: npm test --if-present

  # =======================
  # Security Scanning
  # =======================
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # =======================
  # Quality Summary
  # =======================
  quality-check:
    needs: [backend-test, frontend-test, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Backend tests: ${{ needs.backend-test.result }}"
          echo "Frontend tests: ${{ needs-frontend-test.result }}"
          echo "Security scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.backend-test.result }}" == "success" && \
                "${{ needs.frontend-test.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All checks passed! Ready for deployment."
          else
            echo "❌ Some checks failed. Please review the errors."
            exit 1
          fi
