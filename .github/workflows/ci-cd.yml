name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests and Linting
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Create basic test if none exist
        mkdir -p tests
        if [ ! -f tests/test_main.py ]; then
          cat > tests/test_main.py << 'EOF'
        import pytest
        from fastapi.testclient import TestClient
        from main import app
        
        client = TestClient(app)
        
        def test_health_check():
            response = client.get("/health")
            assert response.status_code == 200
            assert response.json() == {"status": "healthy"}
        
        def test_chat_endpoint():
            response = client.post("/chat", json={"message": "hello"})
            assert response.status_code == 200
            assert "response" in response.json()
        EOF
        fi
        pytest tests/ -v

  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Build application
      run: npm run build
    
    - name: Run type check
      run: npx tsc --noEmit

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality Summary
  quality-check:
    needs: [backend-test, frontend-test, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Backend tests: ${{ needs.backend-test.result }}"
        echo "Frontend tests: ${{ needs.frontend-test.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        
        if [[ "${{ needs.backend-test.result }}" == "success" && "${{ needs.frontend-test.result }}" == "success" ]]; then
          echo "✅ All checks passed! Ready for deployment."
        else
          echo "❌ Some checks failed. Please review the errors."
          exit 1
        fi